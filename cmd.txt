# build docker
docker build -t parilo/pi0 -f scripts/docker/serve_policy.Dockerfile .

mkdir /home/parilo/.cache/openpi
docker run --rm --runtime=nvidia --gpus all --network=host --name pi0 -it -v $PWD:/app -v /home/parilo/.cache/openpi:/openpi_assets --entrypoint bash parilo/pi0
docker run --rm --runtime=nvidia --gpus all --network=host --shm-size=1g --ulimit memlock=-1 --name pi0 -it -v $PWD:/app -v /home/parilo/.cache/openpi:/openpi_assets --entrypoint bash parilo/pi0
docker run --rm --runtime=nvidia --gpus all --network=host --shm-size=1g --ulimit memlock=-1 --name pi0 -it -v $PWD:/app -v /home/parilo/.cache/openpi:/openpi_assets -v /extra_disk_1/parilo/data/:/app/data --entrypoint bash parilo/pi0

# in docker
source /.venv/bin/activate
source set_env.sh
uv run scripts/serve_policy.py policy:checkpoint --policy.config=pi0_droid --policy.dir=s3://openpi-assets/checkpoints/pi0_base

# enter existing docker
docker exec -it pi0 /bin/bash
source /.venv/bin/activate
python examples/simple_client/main.py --env DROID

# --- policy ret (10, 8)
# Total time taken: 0.71 s
# Average inference time: 71.21 ms

# UR10
uv run scripts/serve_policy.py policy:checkpoint --policy.config=pi0_ur10 --policy.dir=s3://openpi-assets/checkpoints/pi0_base
uv run scripts/serve_policy.py policy:checkpoint --policy.config=pi0_ur10_droid --policy.dir=s3://openpi-assets/checkpoints/pi0_droid

# in ruka docker
cd lib/openpi/packages/openpi-client/
python -m pip install .

# build fine tune docker
#docker build -f scripts/docker/serve_policy.Dockerfile .
#apt install hdf5-tools
uv pip install h5py
apt install ffmpeg libsm6 libxext6  -y
uv run scripts/compute_norm_stats.py --config-name pi0_ur10_low_mem_finetune
XLA_PYTHON_CLIENT_MEM_FRACTION=0.9 uv run scripts/train.py pi0_ur10_finetune --exp-name=ur10_ft --overwrite
CUDA_VISIBLE_DEVICES=0 XLA_PYTHON_CLIENT_MEM_FRACTION=0.9 uv run scripts/train.py pi0_ur10_low_mem_finetune --exp-name=ur10_lm_ft_run_7 --resume
CUDA_VISIBLE_DEVICES=1 XLA_PYTHON_CLIENT_MEM_FRACTION=0.95 uv run scripts/train.py pi0_fast_ur10_low_mem_finetune --exp-name=ur10_lm_ft_run_fast_1 --resume
CUDA_VISIBLE_DEVICES=1,6 uv run scripts/train.py pi0_fast_ur10_finetune --exp-name=debug_pi0_fast_ur10_finetune --resume
uv run scripts/serve_policy.py policy:checkpoint --policy.config=pi0_ur10_low_mem_finetune --policy.dir=checkpoints/pi0_ur10_low_mem_finetune/ur10_lm_ft_run_4/9999/


# build docker in cobots VM
docker build -t parilo/pi2 -f scripts/docker/serve_policy2.Dockerfile .
docker run --rm --runtime=nvidia --gpus all --network=host --name pi2 -it -v $PWD:/app -v /home/parilo/.cache/openpi:/openpi_assets --entrypoint bash parilo/pi2

# in ruka docker
cd lib/openpi/packages/openpi-client
python -m pip install .

docker run --rm --runtime=nvidia --gpus all --network=host --name parilo/uv -it --entrypoint bash ghcr.io/astral-sh/uv:0.5.1

CUDA_VISIBLE_DEVICES=0 uv run scripts/train.py debug --exp-name=debug_1 --resume

source /.venv/bin/activate && source set_env.sh && uv pip install h5py && apt install ffmpeg libsm6 libxext6 -y
CUDA_VISIBLE_DEVICES=1,6 uv run scripts/compute_norm_stats.py --config-name pi0_fast_ur10_finetune
CUDA_VISIBLE_DEVICES=1,6 uv run scripts/train.py pi0_fast_ur10_finetune --exp-name=pi0_fast_ur10_finetune_3 --resume

# nirvana
docker build -t parilo/pi0_nirvana:0.2 -f scripts/docker/serve_policy_n2.Dockerfile .
docker tag parilo/pi0_nirvana:0.2 registry.yandex.net/parilo/pi0_nirvana:0.2
docker image push registry.yandex.net/parilo/pi0_nirvana:0.2
tar -cf code_archive.tar openpi2
# dfs v1 is yt
./ruka dfs upload lib/code_archive.tar exp/233_pi0/code_archive.tar
python exp/233_pi0/run_on_nirvana.py
# add docker imane into layers
# https://docs.yandex-team.ru/mltools/tools/python-deep-learning/environment

docker build -t parilo/pi0_n2 -f scripts/docker/serve_policy_n2.Dockerfile .
docker run --rm --gpus all --network=host --shm-size=1g --ulimit memlock=-1 --name pi0_n2 -it -v $PWD:/app -v /home/parilo/.cache/openpi:/openpi_assets --entrypoint bash parilo/pi0_n2
export SOURCE_CODE_PATH=/app
export PYTHONPATH=$PYTHONPATH:$SOURCE_CODE_PATH/src
cd $SOURCE_CODE_PATH
source set_env.sh
CUDA_VISIBLE_DEVICES=3 python scripts/train.py pi0_ur10_low_mem_finetune --exp-name=debug_pi0_ur10_low_mem_finetune --resume
